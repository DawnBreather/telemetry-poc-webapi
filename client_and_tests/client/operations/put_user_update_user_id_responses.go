// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutUserUpdateUserIDReader is a Reader for the PutUserUpdateUserID structure.
type PutUserUpdateUserIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUserUpdateUserIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutUserUpdateUserIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUserUpdateUserIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutUserUpdateUserIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutUserUpdateUserIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /user/update/{userID}] PutUserUpdateUserID", response, response.Code())
	}
}

// NewPutUserUpdateUserIDOK creates a PutUserUpdateUserIDOK with default headers values
func NewPutUserUpdateUserIDOK() *PutUserUpdateUserIDOK {
	return &PutUserUpdateUserIDOK{}
}

/*
PutUserUpdateUserIDOK describes a response with status code 200, with default header values.

User updated successfully
*/
type PutUserUpdateUserIDOK struct {
	Payload *PutUserUpdateUserIDOKBody
}

// IsSuccess returns true when this put user update user Id o k response has a 2xx status code
func (o *PutUserUpdateUserIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put user update user Id o k response has a 3xx status code
func (o *PutUserUpdateUserIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user update user Id o k response has a 4xx status code
func (o *PutUserUpdateUserIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user update user Id o k response has a 5xx status code
func (o *PutUserUpdateUserIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put user update user Id o k response a status code equal to that given
func (o *PutUserUpdateUserIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put user update user Id o k response
func (o *PutUserUpdateUserIDOK) Code() int {
	return 200
}

func (o *PutUserUpdateUserIDOK) Error() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdOK  %+v", 200, o.Payload)
}

func (o *PutUserUpdateUserIDOK) String() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdOK  %+v", 200, o.Payload)
}

func (o *PutUserUpdateUserIDOK) GetPayload() *PutUserUpdateUserIDOKBody {
	return o.Payload
}

func (o *PutUserUpdateUserIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutUserUpdateUserIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUserUpdateUserIDBadRequest creates a PutUserUpdateUserIDBadRequest with default headers values
func NewPutUserUpdateUserIDBadRequest() *PutUserUpdateUserIDBadRequest {
	return &PutUserUpdateUserIDBadRequest{}
}

/*
PutUserUpdateUserIDBadRequest describes a response with status code 400, with default header values.

Bad request or invalid user ID
*/
type PutUserUpdateUserIDBadRequest struct {
}

// IsSuccess returns true when this put user update user Id bad request response has a 2xx status code
func (o *PutUserUpdateUserIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user update user Id bad request response has a 3xx status code
func (o *PutUserUpdateUserIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user update user Id bad request response has a 4xx status code
func (o *PutUserUpdateUserIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user update user Id bad request response has a 5xx status code
func (o *PutUserUpdateUserIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put user update user Id bad request response a status code equal to that given
func (o *PutUserUpdateUserIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put user update user Id bad request response
func (o *PutUserUpdateUserIDBadRequest) Code() int {
	return 400
}

func (o *PutUserUpdateUserIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdBadRequest ", 400)
}

func (o *PutUserUpdateUserIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdBadRequest ", 400)
}

func (o *PutUserUpdateUserIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUserUpdateUserIDNotFound creates a PutUserUpdateUserIDNotFound with default headers values
func NewPutUserUpdateUserIDNotFound() *PutUserUpdateUserIDNotFound {
	return &PutUserUpdateUserIDNotFound{}
}

/*
PutUserUpdateUserIDNotFound describes a response with status code 404, with default header values.

User not found
*/
type PutUserUpdateUserIDNotFound struct {
}

// IsSuccess returns true when this put user update user Id not found response has a 2xx status code
func (o *PutUserUpdateUserIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user update user Id not found response has a 3xx status code
func (o *PutUserUpdateUserIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user update user Id not found response has a 4xx status code
func (o *PutUserUpdateUserIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put user update user Id not found response has a 5xx status code
func (o *PutUserUpdateUserIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put user update user Id not found response a status code equal to that given
func (o *PutUserUpdateUserIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put user update user Id not found response
func (o *PutUserUpdateUserIDNotFound) Code() int {
	return 404
}

func (o *PutUserUpdateUserIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdNotFound ", 404)
}

func (o *PutUserUpdateUserIDNotFound) String() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdNotFound ", 404)
}

func (o *PutUserUpdateUserIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUserUpdateUserIDInternalServerError creates a PutUserUpdateUserIDInternalServerError with default headers values
func NewPutUserUpdateUserIDInternalServerError() *PutUserUpdateUserIDInternalServerError {
	return &PutUserUpdateUserIDInternalServerError{}
}

/*
PutUserUpdateUserIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PutUserUpdateUserIDInternalServerError struct {
}

// IsSuccess returns true when this put user update user Id internal server error response has a 2xx status code
func (o *PutUserUpdateUserIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put user update user Id internal server error response has a 3xx status code
func (o *PutUserUpdateUserIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put user update user Id internal server error response has a 4xx status code
func (o *PutUserUpdateUserIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put user update user Id internal server error response has a 5xx status code
func (o *PutUserUpdateUserIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put user update user Id internal server error response a status code equal to that given
func (o *PutUserUpdateUserIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put user update user Id internal server error response
func (o *PutUserUpdateUserIDInternalServerError) Code() int {
	return 500
}

func (o *PutUserUpdateUserIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdInternalServerError ", 500)
}

func (o *PutUserUpdateUserIDInternalServerError) String() string {
	return fmt.Sprintf("[PUT /user/update/{userID}][%d] putUserUpdateUserIdInternalServerError ", 500)
}

func (o *PutUserUpdateUserIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PutUserUpdateUserIDOKBody put user update user ID o k body
swagger:model PutUserUpdateUserIDOKBody
*/
type PutUserUpdateUserIDOKBody struct {

	// result
	// Example: success
	Result string `json:"result,omitempty"`
}

// Validate validates this put user update user ID o k body
func (o *PutUserUpdateUserIDOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user update user ID o k body based on context it is used
func (o *PutUserUpdateUserIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserUpdateUserIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserUpdateUserIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutUserUpdateUserIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
