// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutCarUpdateCarIDReader is a Reader for the PutCarUpdateCarID structure.
type PutCarUpdateCarIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCarUpdateCarIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutCarUpdateCarIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutCarUpdateCarIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutCarUpdateCarIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutCarUpdateCarIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutCarUpdateCarIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /car/update/{carID}] PutCarUpdateCarID", response, response.Code())
	}
}

// NewPutCarUpdateCarIDOK creates a PutCarUpdateCarIDOK with default headers values
func NewPutCarUpdateCarIDOK() *PutCarUpdateCarIDOK {
	return &PutCarUpdateCarIDOK{}
}

/*
PutCarUpdateCarIDOK describes a response with status code 200, with default header values.

Car updated successfully
*/
type PutCarUpdateCarIDOK struct {
	Payload *PutCarUpdateCarIDOKBody
}

// IsSuccess returns true when this put car update car Id o k response has a 2xx status code
func (o *PutCarUpdateCarIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put car update car Id o k response has a 3xx status code
func (o *PutCarUpdateCarIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put car update car Id o k response has a 4xx status code
func (o *PutCarUpdateCarIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put car update car Id o k response has a 5xx status code
func (o *PutCarUpdateCarIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put car update car Id o k response a status code equal to that given
func (o *PutCarUpdateCarIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put car update car Id o k response
func (o *PutCarUpdateCarIDOK) Code() int {
	return 200
}

func (o *PutCarUpdateCarIDOK) Error() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdOK  %+v", 200, o.Payload)
}

func (o *PutCarUpdateCarIDOK) String() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdOK  %+v", 200, o.Payload)
}

func (o *PutCarUpdateCarIDOK) GetPayload() *PutCarUpdateCarIDOKBody {
	return o.Payload
}

func (o *PutCarUpdateCarIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutCarUpdateCarIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutCarUpdateCarIDBadRequest creates a PutCarUpdateCarIDBadRequest with default headers values
func NewPutCarUpdateCarIDBadRequest() *PutCarUpdateCarIDBadRequest {
	return &PutCarUpdateCarIDBadRequest{}
}

/*
PutCarUpdateCarIDBadRequest describes a response with status code 400, with default header values.

Bad request or invalid car ID
*/
type PutCarUpdateCarIDBadRequest struct {
}

// IsSuccess returns true when this put car update car Id bad request response has a 2xx status code
func (o *PutCarUpdateCarIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put car update car Id bad request response has a 3xx status code
func (o *PutCarUpdateCarIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put car update car Id bad request response has a 4xx status code
func (o *PutCarUpdateCarIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put car update car Id bad request response has a 5xx status code
func (o *PutCarUpdateCarIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put car update car Id bad request response a status code equal to that given
func (o *PutCarUpdateCarIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put car update car Id bad request response
func (o *PutCarUpdateCarIDBadRequest) Code() int {
	return 400
}

func (o *PutCarUpdateCarIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdBadRequest ", 400)
}

func (o *PutCarUpdateCarIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdBadRequest ", 400)
}

func (o *PutCarUpdateCarIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCarUpdateCarIDUnauthorized creates a PutCarUpdateCarIDUnauthorized with default headers values
func NewPutCarUpdateCarIDUnauthorized() *PutCarUpdateCarIDUnauthorized {
	return &PutCarUpdateCarIDUnauthorized{}
}

/*
PutCarUpdateCarIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized attempt to update car
*/
type PutCarUpdateCarIDUnauthorized struct {
}

// IsSuccess returns true when this put car update car Id unauthorized response has a 2xx status code
func (o *PutCarUpdateCarIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put car update car Id unauthorized response has a 3xx status code
func (o *PutCarUpdateCarIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put car update car Id unauthorized response has a 4xx status code
func (o *PutCarUpdateCarIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put car update car Id unauthorized response has a 5xx status code
func (o *PutCarUpdateCarIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put car update car Id unauthorized response a status code equal to that given
func (o *PutCarUpdateCarIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put car update car Id unauthorized response
func (o *PutCarUpdateCarIDUnauthorized) Code() int {
	return 401
}

func (o *PutCarUpdateCarIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdUnauthorized ", 401)
}

func (o *PutCarUpdateCarIDUnauthorized) String() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdUnauthorized ", 401)
}

func (o *PutCarUpdateCarIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCarUpdateCarIDNotFound creates a PutCarUpdateCarIDNotFound with default headers values
func NewPutCarUpdateCarIDNotFound() *PutCarUpdateCarIDNotFound {
	return &PutCarUpdateCarIDNotFound{}
}

/*
PutCarUpdateCarIDNotFound describes a response with status code 404, with default header values.

Car not found
*/
type PutCarUpdateCarIDNotFound struct {
}

// IsSuccess returns true when this put car update car Id not found response has a 2xx status code
func (o *PutCarUpdateCarIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put car update car Id not found response has a 3xx status code
func (o *PutCarUpdateCarIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put car update car Id not found response has a 4xx status code
func (o *PutCarUpdateCarIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put car update car Id not found response has a 5xx status code
func (o *PutCarUpdateCarIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put car update car Id not found response a status code equal to that given
func (o *PutCarUpdateCarIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put car update car Id not found response
func (o *PutCarUpdateCarIDNotFound) Code() int {
	return 404
}

func (o *PutCarUpdateCarIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdNotFound ", 404)
}

func (o *PutCarUpdateCarIDNotFound) String() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdNotFound ", 404)
}

func (o *PutCarUpdateCarIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCarUpdateCarIDInternalServerError creates a PutCarUpdateCarIDInternalServerError with default headers values
func NewPutCarUpdateCarIDInternalServerError() *PutCarUpdateCarIDInternalServerError {
	return &PutCarUpdateCarIDInternalServerError{}
}

/*
PutCarUpdateCarIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error or error updating car
*/
type PutCarUpdateCarIDInternalServerError struct {
}

// IsSuccess returns true when this put car update car Id internal server error response has a 2xx status code
func (o *PutCarUpdateCarIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put car update car Id internal server error response has a 3xx status code
func (o *PutCarUpdateCarIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put car update car Id internal server error response has a 4xx status code
func (o *PutCarUpdateCarIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put car update car Id internal server error response has a 5xx status code
func (o *PutCarUpdateCarIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put car update car Id internal server error response a status code equal to that given
func (o *PutCarUpdateCarIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the put car update car Id internal server error response
func (o *PutCarUpdateCarIDInternalServerError) Code() int {
	return 500
}

func (o *PutCarUpdateCarIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdInternalServerError ", 500)
}

func (o *PutCarUpdateCarIDInternalServerError) String() string {
	return fmt.Sprintf("[PUT /car/update/{carID}][%d] putCarUpdateCarIdInternalServerError ", 500)
}

func (o *PutCarUpdateCarIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PutCarUpdateCarIDOKBody put car update car ID o k body
swagger:model PutCarUpdateCarIDOKBody
*/
type PutCarUpdateCarIDOKBody struct {

	// result
	// Example: success
	Result string `json:"result,omitempty"`
}

// Validate validates this put car update car ID o k body
func (o *PutCarUpdateCarIDOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put car update car ID o k body based on context it is used
func (o *PutCarUpdateCarIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCarUpdateCarIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCarUpdateCarIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutCarUpdateCarIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
