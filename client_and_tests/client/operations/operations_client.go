// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCarDeleteCarID(params *DeleteCarDeleteCarIDParams, opts ...ClientOption) (*DeleteCarDeleteCarIDOK, error)

	DeleteUserDeleteUserID(params *DeleteUserDeleteUserIDParams, opts ...ClientOption) (*DeleteUserDeleteUserIDOK, error)

	GetCarCarID(params *GetCarCarIDParams, opts ...ClientOption) (*GetCarCarIDOK, error)

	GetCarList(params *GetCarListParams, opts ...ClientOption) (*GetCarListOK, error)

	GetMiscHealth(params *GetMiscHealthParams, opts ...ClientOption) (*GetMiscHealthOK, error)

	GetMiscVersion(params *GetMiscVersionParams, opts ...ClientOption) (*GetMiscVersionOK, error)

	GetUserList(params *GetUserListParams, opts ...ClientOption) (*GetUserListOK, error)

	GetUserUserID(params *GetUserUserIDParams, opts ...ClientOption) (*GetUserUserIDOK, error)

	PostCarCreate(params *PostCarCreateParams, opts ...ClientOption) (*PostCarCreateOK, error)

	PostUserCreate(params *PostUserCreateParams, opts ...ClientOption) (*PostUserCreateOK, error)

	PostUserLogin(params *PostUserLoginParams, opts ...ClientOption) (*PostUserLoginOK, error)

	PutCarUpdateCarID(params *PutCarUpdateCarIDParams, opts ...ClientOption) (*PutCarUpdateCarIDOK, error)

	PutUserUpdateUserID(params *PutUserUpdateUserIDParams, opts ...ClientOption) (*PutUserUpdateUserIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteCarDeleteCarID removes a car from the system

Deletes a car record from the system based on the car ID.
*/
func (a *Client) DeleteCarDeleteCarID(params *DeleteCarDeleteCarIDParams, opts ...ClientOption) (*DeleteCarDeleteCarIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCarDeleteCarIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCarDeleteCarID",
		Method:             "DELETE",
		PathPattern:        "/car/delete/{carID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCarDeleteCarIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCarDeleteCarIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCarDeleteCarID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserDeleteUserID removes a user from the system

Deletes a user from the system based on the provided user ID.
*/
func (a *Client) DeleteUserDeleteUserID(params *DeleteUserDeleteUserIDParams, opts ...ClientOption) (*DeleteUserDeleteUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserDeleteUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUserDeleteUserID",
		Method:             "DELETE",
		PathPattern:        "/user/delete/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserDeleteUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserDeleteUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUserDeleteUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCarCarID retrieves details of a specific car

Fetches details of a car specified by its unique ID.
*/
func (a *Client) GetCarCarID(params *GetCarCarIDParams, opts ...ClientOption) (*GetCarCarIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCarCarIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCarCarID",
		Method:             "GET",
		PathPattern:        "/car/{carID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCarCarIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCarCarIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCarCarID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCarList lists all cars in the system

Retrieves a list of all cars available in the system.
*/
func (a *Client) GetCarList(params *GetCarListParams, opts ...ClientOption) (*GetCarListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCarListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCarList",
		Method:             "GET",
		PathPattern:        "/car/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCarListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCarListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCarList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMiscHealth checks if the API is running and reachable
*/
func (a *Client) GetMiscHealth(params *GetMiscHealthParams, opts ...ClientOption) (*GetMiscHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMiscHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMiscHealth",
		Method:             "GET",
		PathPattern:        "/misc/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMiscHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMiscHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMiscHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMiscVersion provides the current version of the API
*/
func (a *Client) GetMiscVersion(params *GetMiscVersionParams, opts ...ClientOption) (*GetMiscVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMiscVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMiscVersion",
		Method:             "GET",
		PathPattern:        "/misc/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMiscVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMiscVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMiscVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserList lists all users in the system

Retrieve a list of all users currently in the system.
*/
func (a *Client) GetUserList(params *GetUserListParams, opts ...ClientOption) (*GetUserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserList",
		Method:             "GET",
		PathPattern:        "/user/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserUserID retrieves detailed information for a specific user

Fetches detailed information of a user identified by their user ID.
*/
func (a *Client) GetUserUserID(params *GetUserUserIDParams, opts ...ClientOption) (*GetUserUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserUserID",
		Method:             "GET",
		PathPattern:        "/user/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCarCreate adds a new car to the system

Creates a new car record in the system.
*/
func (a *Client) PostCarCreate(params *PostCarCreateParams, opts ...ClientOption) (*PostCarCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCarCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCarCreate",
		Method:             "POST",
		PathPattern:        "/car/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCarCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCarCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCarCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserCreate creates a new user

Create a new user in the system
*/
func (a *Client) PostUserCreate(params *PostUserCreateParams, opts ...ClientOption) (*PostUserCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserCreate",
		Method:             "POST",
		PathPattern:        "/user/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserLogin authenticates a user and return a token

Authenticate a user by their credentials and return a JWT token upon successful authentication.
*/
func (a *Client) PostUserLogin(params *PostUserLoginParams, opts ...ClientOption) (*PostUserLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserLogin",
		Method:             "POST",
		PathPattern:        "/user/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUserLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUserLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutCarUpdateCarID updates an existing car entry

Updates the details of an existing car identified by its car ID.
*/
func (a *Client) PutCarUpdateCarID(params *PutCarUpdateCarIDParams, opts ...ClientOption) (*PutCarUpdateCarIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCarUpdateCarIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutCarUpdateCarID",
		Method:             "PUT",
		PathPattern:        "/car/update/{carID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCarUpdateCarIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCarUpdateCarIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutCarUpdateCarID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutUserUpdateUserID updates an existing user s information

Updates the details of an existing user identified by their user ID.
*/
func (a *Client) PutUserUpdateUserID(params *PutUserUpdateUserIDParams, opts ...ClientOption) (*PutUserUpdateUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUserUpdateUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutUserUpdateUserID",
		Method:             "PUT",
		PathPattern:        "/user/update/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUserUpdateUserIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutUserUpdateUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutUserUpdateUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
