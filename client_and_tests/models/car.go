// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Car car
//
// swagger:model Car
type Car struct {

	// color
	// Required: true
	Color *string `json:"Color"`

	// Id
	ID int64 `json:"Id,omitempty"`

	// make
	// Required: true
	Make *string `json:"Make"`

	// model
	// Required: true
	Model *string `json:"Model"`

	// year
	// Required: true
	Year *int64 `json:"Year"`
}

// Validate validates this car
func (m *Car) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMake(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Car) validateColor(formats strfmt.Registry) error {

	if err := validate.Required("Color", "body", m.Color); err != nil {
		return err
	}

	return nil
}

func (m *Car) validateMake(formats strfmt.Registry) error {

	if err := validate.Required("Make", "body", m.Make); err != nil {
		return err
	}

	return nil
}

func (m *Car) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("Model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *Car) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("Year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this car based on context it is used
func (m *Car) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Car) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Car) UnmarshalBinary(b []byte) error {
	var res Car
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
